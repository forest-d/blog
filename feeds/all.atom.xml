<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Forest's Blog</title><link href="https://forestdussault.com/" rel="alternate"></link><link href="https://forestdussault.com/feeds/all.atom.xml" rel="self"></link><id>https://forestdussault.com/</id><updated>2025-06-28T00:13:00-04:00</updated><entry><title>Tree-based conversations with LLMs</title><link href="https://forestdussault.com/tree-based-conversations-with-llms.html" rel="alternate"></link><published>2025-06-28T00:13:00-04:00</published><updated>2025-06-28T00:13:00-04:00</updated><author><name>Forest Dussault</name></author><id>tag:forestdussault.com,2025-06-28:/tree-based-conversations-with-llms.html</id><summary type="html">&lt;p&gt;Addressing the context rot problem with UI&lt;/p&gt;</summary><content type="html">&lt;p&gt;Anyone who has used LLMs extensively, especially for coding, can attest to the trouble of &lt;a href="https://simonwillison.net/2025/Jun/18/context-rot/"&gt;context rot&lt;/a&gt;. The gradual accumulation of 
tangents and junk responses creates an increasingly tainted ecosystem for the LLM to work with. At some point continuing the 
conversation further becomes untenable, and we're forced to start anew.&lt;/p&gt;
&lt;p&gt;I figured one "easy" UI solution to this would be to introduce a tree-based conversation structure. If a user could easily create branches 
in their conversation with the LLM, and navigate between nodes quickly, they could curate their conversation to avoid the accumulation of 
garbage. &lt;/p&gt;
&lt;p&gt;I booted up Claude Code and went through a several-hour struggle session to get a prototype together. Here's what I (we? it?) came up with.&lt;/p&gt;
&lt;h2&gt;DendriteLLM&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/forest-d/DendriteLLM"&gt;DendriteLLM&lt;/a&gt; is a simple React application that allows for tree-based conversations with LLMs (actually just Claude for now).&lt;/p&gt;
&lt;p&gt;The core idea is simple: instead of a linear chat, users interact with a tree-like structure where they can branch off at any point in their conversation history. The UI provides two main views - a chat interface and an interactive tree diagram showing the conversation's structure. The tree view is built with &lt;a href="https://reactflow.dev/"&gt;React Flow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've integrated it with Claude's API, though the architecture could easily support other models. The application preserves all state locally, so conversations remain private.&lt;/p&gt;
&lt;p&gt;The application starts with a demo conversation to help users understand the branching concept. It immediately communicates the benefits of this approach.&lt;/p&gt;
&lt;p&gt;I think the tree view is satisfying to use, and I'd like to see Anthropic et al. implement something similar. You can click on any node to navigate to that part of the conversation, drag nodes around to organize your thoughts, and create new branches. The visual representation makes it much easier to keep track of complex, multi-threaded discussions.&lt;/p&gt;
&lt;h2&gt;An Aside&lt;/h2&gt;
&lt;p&gt;I spoke briefly about LLMs as pedagogical tools in my previous blog post. They're excellent for overcoming the activation energy 
required to learn a new topic. Similarly, this project demonstrates another huge benefit of LLMs - overcoming the activation energy to bring an idea to fruition. 
This type of somewhat complex prototype would have taken me an untenable amount of time a few years ago. I would have come up with an idea, thought to myself "That would be cool", and simply moved on. 
However, now that the barrier to entry is so low, I have very little excuse to not act on my ideas.&lt;/p&gt;</content><category term="General"></category></entry><entry><title>Building a magical stock market orb</title><link href="https://forestdussault.com/building-a-magical-stock-market-orb.html" rel="alternate"></link><published>2025-06-20T10:25:00-04:00</published><updated>2025-06-20T10:25:00-04:00</updated><author><name>Forest Dussault</name></author><id>tag:forestdussault.com,2025-06-20:/building-a-magical-stock-market-orb.html</id><summary type="html">&lt;p&gt;I built a glowing orb that monitors the stock market&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Market Orb Setup" src="images/stock-market-orb/green_orb_with_laptop.JPEG" title="Behold the Orb"&gt;&lt;/p&gt;
&lt;p&gt;I built a simple IoT device that glows green when a chosen ticker is up and red when it's down. Think of it as a mood lamp for finance bros. I've had this idea for years 
but only recently overcame the activation energy required to pull it off (largely thanks to LLMs). &lt;/p&gt;
&lt;h2&gt;How the Orb works&lt;/h2&gt;
&lt;p&gt;The Orb is a configurable device that displays market performance through dynamic ambient lighting.&lt;/p&gt;
&lt;p&gt;The user is able to select any ticker via a web UI, and the Orb then retrieves a quote for the ticker. It then responds green for gains, red for losses, or blue for flat performance. 
It's quite satisfying to glance across the room and immediately know how your precious ticker is doing.&lt;/p&gt;
&lt;p&gt;The Orb requires USB power and a live WiFi connection. Upon receiving power, the Orb spins up a WiFi network called &lt;code&gt;Orb-Setup&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Orb WiFi" src="images/stock-market-orb/orb_wifi.png" title="WiFi network selection"&gt;&lt;/p&gt;
&lt;p&gt;The user connects to this network, then navigates to &lt;code&gt;http://orb.config&lt;/code&gt; to input their WiFi information and &lt;a href="https://finnhub.io/"&gt;Finnhub&lt;/a&gt; API key.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Web Setup" src="images/stock-market-orb/orb_setup.png" title="WiFi setup page for the Orb"&gt;&lt;/p&gt;
&lt;p&gt;Once the setup is done, the user switches back to their home network and is able to enjoy their orb. 
If desired, it can be configured further through the local setup page at &lt;code&gt;http://orb.local&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Web Config" src="images/stock-market-orb/orb_local.png" title="Configuration page for the Orb"&gt;&lt;/p&gt;
&lt;h2&gt;LLMs as Pedagogical Tools&lt;/h2&gt;
&lt;p&gt;I had essentially zero embedded electronics experience going into this. To approach the project, I used Claude with the 
&lt;a href="https://www.anthropic.com/news/projects"&gt;Projects feature&lt;/a&gt; as a learning tool. This was very effective. The LLM helped me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Determine what components and tools to buy (ESP32-S3 dev board, WS2812B LED ring, perfboards, etc)&lt;/li&gt;
&lt;li&gt;Select software (&lt;a href="https://www.arduino.cc/en/software/"&gt;Arduino IDE&lt;/a&gt;, &lt;a href="https://www.kicad.org/"&gt;KiCad&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Understand pin configurations/wiring diagrams&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The barrier to entry was massively reduced thanks to help from an LLM. &lt;/p&gt;
&lt;p&gt;I could, of course, have completed the necessary background research independently, though I likely saved days (weeks?) of time. 
I don't think this is a suitable approach for becoming an &lt;em&gt;expert&lt;/em&gt; in any field, though for a hobby-level understanding of a new subject, this approach works great. &lt;/p&gt;
&lt;p&gt;This is a dead simple project. The circuit is a resistor, an LED ring, and an ESP32-S3 - that's it. However, it 
felt great to get it all prototyped and eventually built.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Breadboard Prototype" src="images/stock-market-orb/prototyping_breadboard.JPEG" title="Prototyping the circuit and code"&gt;&lt;/p&gt;
&lt;h2&gt;Firmware&lt;/h2&gt;
&lt;p&gt;The second major LLM use case was vibe coding the Orb's features. Working in C++ for Arduino was new to me, but Claude excelled at the tedious parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Programming different LED animation states (breathing effects, color transitions, error indicators)&lt;/li&gt;
&lt;li&gt;Implementing the WiFi captive portal setup&lt;/li&gt;
&lt;li&gt;Creating the HTML web interface for changing ticker symbols&lt;/li&gt;
&lt;li&gt;Handling error states and watchdog timers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The resulting code handles WiFi configuration through a captive portal, fetches stock data every 30 seconds, and smoothly animates between market states. 
Once again, I could have done this without the aid of an LLM, but it would have taken me considerably longer to achieve the same result. &lt;/p&gt;
&lt;h2&gt;Component Selection&lt;/h2&gt;
&lt;p&gt;The build uses two main electronic components, which I purchased from AliExpress:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ESP32-S3 development board&lt;/strong&gt; (~$6): Provides WiFi connectivity, sufficient GPIO pins, and enough processing power for HTTP requests and LED control&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WS2812B LED ring with 16 LEDs&lt;/strong&gt; (~$3): Individually addressable RGB LEDs arrayed in a ring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="ESP32-S3" src="images/stock-market-orb/esp32s3_on_perfboard.JPEG" title="The ESP32-S3 is amazing"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Perfboard Setup" src="images/stock-market-orb/perfboard_with_hot_glue.JPEG" title="This goes into the orb housing"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.espressif.com/en/products/socs/esp32-s3"&gt;ESP32-S3&lt;/a&gt; blew me away with its capabilities and miniscule form factor for such an inexpensive part. It's a dual-core microcontroller with WiFi and Bluetooth for $6 CAD. Amazing!&lt;/p&gt;
&lt;p&gt;A single 220Î© resistor protects the LED data line, and the entire circuit runs off USB power through the dev board's built-in voltage regulation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Housing the Orb" src="images/stock-market-orb/circuit_attachment_to_orb.JPEG" title="This mess is held together by hot glue and bamboo skewer sticks"&gt;&lt;/p&gt;
&lt;h2&gt;Stock Market Data APIs&lt;/h2&gt;
&lt;p&gt;I was surprised at how expensive real-time financial data is. Many providers charge $30-$100+ monthly for basic quote access. I narrowed the products down to several options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Yahoo Finance&lt;/strong&gt;: Free, but unofficial and unreliable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alpha Vantage&lt;/strong&gt;: Decent free tier but limited requests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Finnhub&lt;/strong&gt;: 60 API calls per minute free tier, perfect for 30-second updates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finnhub turned out to be the easiest free option for this particular project. In the future I'll likely add calls to Yahoo Finance as a fallback to cope with usage issues or Finnhub outages. &lt;/p&gt;
&lt;h2&gt;Shipping to Prod&lt;/h2&gt;
&lt;p&gt;I'm interested in attempting to produce a small volume of these beautiful orbs as consumer products. It's dumb and memeable, so maybe some other 
people will buy one (or several!). Mostly though, I'm interested in finding out what it takes to have a custom IoT device manufactured and&lt;br&gt;
sold to paying customers at a small hobby-level scale.&lt;/p&gt;
&lt;p&gt;Next steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Design a PCB and figure out how much it costs to get it built. &lt;a href="https://www.pcbway.com/"&gt;PCBWay&lt;/a&gt; seems to be a commonly used route here. &lt;/li&gt;
&lt;li&gt;Design/model the Orb housing in modeling software for eventual 3D printing. I'll likely use &lt;a href="http://www.autodesk.com/ca-en/products/fusion-360/"&gt;Fusion360&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Find an appropriate 3D printing service for the housing&lt;/li&gt;
&lt;li&gt;Source some inexpensive USB-C cables&lt;/li&gt;
&lt;li&gt;Figure out how feasible it is for me to assemble ~100 of these at home&lt;/li&gt;
&lt;li&gt;Figure out what an "at scale" solution to the ticker quote problem looks like&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If all of the above goes well and the costs aren't insane, I'll spin up a little website with Shopify and try to 
sell a few of these things.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sad day" src="images/stock-market-orb/red_orb_with_laptop.JPEG" title="Sometimes it's red"&gt;&lt;/p&gt;</content><category term="General"></category></entry><entry><title>repo2llm</title><link href="https://forestdussault.com/repo2llm.html" rel="alternate"></link><published>2025-03-18T22:01:00-04:00</published><updated>2025-03-18T22:01:00-04:00</updated><author><name>Forest Dussault</name></author><id>tag:forestdussault.com,2025-03-18:/repo2llm.html</id><summary type="html">&lt;p&gt;Brief overview of my tool repo2llm&lt;/p&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;UPDATE 2025-06-28

This is already hilariously out of date after only a few months. I&amp;#39;ve since moved on to using Claude Code and JetBrains&amp;#39; Cursor ripoff.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A few months back I hacked together &lt;a href="https://github.com/forest-d/repo2llm"&gt;repo2llm&lt;/a&gt;, a &lt;code&gt;pip&lt;/code&gt; package that allows 
users to copy directory contents to their clipboard. It's built specifically for passing along context from coding 
projects to an LLM like Claude or ChatGPT (typically through their respective web UIs).&lt;/p&gt;
&lt;p&gt;I wrote the tool for my own sake. I found myself copying the contents of coding projects into Claude frequently, 
and I was getting tired of going through the motions of collecting all the necessary context for my question(s). Now, 
by writing &lt;code&gt;repo2llm .&lt;/code&gt; into my terminal, I'm able to grab all the files in the project in a structured manner and 
paste them into Claude's generous context window. This works great for relatively small projects,&lt;/p&gt;
&lt;p&gt;When constructing the contents for the user's clipboard, files are tagged according to their location in the repo. 
For example, here's the abbreviated output from &lt;code&gt;repo2llm ./content&lt;/code&gt; in the source code for this blog:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;file name=&amp;quot;01-first-post.md&amp;quot;&amp;gt;
...
&amp;lt;/file&amp;gt;

&amp;lt;file name=&amp;quot;02-using-zwift-with-a-peloton.md&amp;quot;&amp;gt;
...
&amp;lt;/file&amp;gt;

&amp;lt;file name=&amp;quot;03-repo2llm.md&amp;quot;&amp;gt;
...
&amp;lt;/file&amp;gt;

&amp;lt;file name=&amp;quot;images/__init__.py&amp;quot;&amp;gt;
...
&amp;lt;/file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also built in some sensible defaults for ignoring files and directories, e.g. Python venvs, &lt;code&gt;.git/&lt;/code&gt;, &lt;code&gt;node_modules/&lt;/code&gt;, 
and so on. These can be easily overridden if needed via a &lt;code&gt;.repo2llm&lt;/code&gt; config file placed in the working directory.&lt;/p&gt;
&lt;h2&gt;Cursor et. al&lt;/h2&gt;
&lt;p&gt;Yes, there are many, many alternatives to this tool. Indeed, I use &lt;a href="https://www.cursor.com/en"&gt;Cursor&lt;/a&gt; myself 
occasionally. However, I still find myself reaching for my own tool for several reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It's very easy to collect exactly the context I need&lt;/li&gt;
&lt;li&gt;I like using Claude's web UI, and this tool works well with it&lt;/li&gt;
&lt;li&gt;It feels good to make use of something you've built yourself&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That said, it's clear that AI assisted coding is becoming more sophisticated every day. I fully 
expect &lt;code&gt;repo2llm&lt;/code&gt; to become obsolete for me within the year. Personally, I'm hoping JetBrains is able to get their 
&lt;a href="https://www.jetbrains.com/ai/"&gt;AI IDE product&lt;/a&gt; on a level comparable with Cursor - it's not even close right now. 
PyCharm is my favourite IDE, though it's woefully behind in terms of AI integration as of writing.&lt;/p&gt;</content><category term="Software"></category><category term="python"></category><category term="llm"></category><category term="claude"></category><category term="chatgpt"></category><category term="cursor"></category><category term="ai"></category></entry><entry><title>Using Zwift with a Peloton: SmartSpin2k</title><link href="https://forestdussault.com/using-zwift-with-a-peloton.html" rel="alternate"></link><published>2025-03-14T20:29:00-04:00</published><updated>2025-03-14T20:29:00-04:00</updated><author><name>Forest Dussault</name></author><id>tag:forestdussault.com,2025-03-14:/using-zwift-with-a-peloton.html</id><summary type="html">&lt;p&gt;How I use Zwift with my OG Peloton&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cycling is great, though not so great during a Canadian winter. I've wanted to try out the gamified cycling world of &lt;a href="www.zwift.com"&gt;Zwift&lt;/a&gt; for some 
time now, alas, I do not own a trainer. &lt;/p&gt;
&lt;p&gt;I do, however, have an original Peloton bike, and the Peloton has all the essential hardware to work with Zwift.&lt;/p&gt;
&lt;p&gt;Thanks to the hard work of a couple of talented people, this process is relatively straightfoward for someone who 
likes to tinker. At a high level, what we need is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A way to install or display Zwift on our Peloton&lt;/li&gt;
&lt;li&gt;A way to send sensor data (cadence, power) from the Peloton to Zwift&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Turns out that the &lt;a href="https://www.smartspin2k.com/"&gt;SmartSpin2k&lt;/a&gt; solves this entirely.&lt;/p&gt;
&lt;h2&gt;1. Zwift + Peloton&lt;/h2&gt;
&lt;p&gt;Our first problem: how do we install Android apps on a Peloton? &lt;/p&gt;
&lt;p&gt;At its core, the Peloton is a big Android 
tablet slapped onto an exercise bike. Out of the box, users are not able to install other Android apps onto the Peloton. 
However, &lt;a href="https://github.com/doudar"&gt;Anthony Doud&lt;/a&gt; has 
developed the excellent &lt;a href="https://github.com/doudar/OpenPelo"&gt;OpenPelo&lt;/a&gt; tool, 
which allows us install a custom launcher and several other handy Android apps onto the Peloton. 
I followed the corresponding &lt;a href="https://www.youtube.com/watch?v=Q5XIlXqa0Cg"&gt;YouTube tutorial&lt;/a&gt; without any issues and had 
my Peloton running the new launcher in about 20 minutes.&lt;/p&gt;
&lt;p&gt;Ideally we'd be able to install the &lt;a href="https://play.google.com/store/apps/details?id=com.zwift.zwiftgame&amp;amp;hl=en_CA"&gt;Android Zwift app&lt;/a&gt; on the Peloton, 
however the onboard storage of the original Peloton bike is too small to handle the Zwift installation.
Instead we can make use of the classic &lt;a href="https://github.com/LizardByte/Sunshine"&gt;Sunshine&lt;/a&gt; + &lt;a href="https://github.com/moonlight-stream"&gt;Moonlight&lt;/a&gt; setup to stream Zwift 
remotely from a desktop PC.
(&lt;em&gt;This incidentally is also how I stream games from my desktop PC to my Steam Deck - it works great&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Zwift on Peloton" src="/images/zwift-with-peloton/it_works.JPEG" title="Zwift streamed via Moonlight to the Peloton tablet"&gt;&lt;/p&gt;
&lt;h2&gt;2. Relaying Peloton sensor data to Zwift&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://www.smartspin2k.com/"&gt;SmartSpin2k&lt;/a&gt; is at the heart of this setup. It's an awesome project developed 
by the aformentioned Anthony Doud. The SmartSpin2k is a 3D printed piece of hardware that reads from the Peloton cadence 
and power sensors, and acts as a Bluetooth device that can forward this data along to a connected device. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Sensor Connection" src="/images/zwift-with-peloton/sensor_connection.JPEG" title="Rerouting Peloton sensor data to the SmartSpin2k"&gt;&lt;/p&gt;
&lt;p&gt;Crucially, it is also able to relay Zwift commands to a motor that can rotate the Peloton's resistance knob on your 
behalf. Once set up correctly, the SmartSpin2k will automatically adjust the Peloton's resistance according to the 
grade or ERG setup on the active Zwift course.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SmartSpin2k" src="/images/zwift-with-peloton/smartspin2k.JPEG" title="SmartSpin2k motorized resistance controller"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="SmartSpin2k Shifter" src="/images/zwift-with-peloton/shifter.JPEG" title="SmartSpin2k gear shifter, allows for manual adjustments to resistance"&gt;&lt;/p&gt;
&lt;p&gt;I bought mine from &lt;a href="https://www.etsy.com/listing/1356903775/smartspin2k-v3-spin-bike-smart-trainer?etsrc=sdt"&gt;eMadmanMakes&lt;/a&gt;, 
who 3D prints and assembles the devices for Canadian users. All in it was around $400 CAD, which had me hesitant at first, 
though now that I've been living with it for a few weeks I have no regrets. It's a well-made and functional tool.&lt;/p&gt;
&lt;p&gt;Installation was very easy and took around 10 minutes. The &lt;a href="https://docs.smartspin2k.com/documentation/configuration.html"&gt;guide&lt;/a&gt; is also quite comprehensive and covers several other 
potential configurations.&lt;/p&gt;
&lt;h2&gt;Zwifting&lt;/h2&gt;
&lt;p&gt;Now that the setup is done, I can use my Peloton to Zwift! I can also still use the Peloton bike as a regular 
Peloton whenever I like, so there's been no loss in functionality. &lt;/p&gt;
&lt;p&gt;Zwift in general has been more fun for me than the Peloton cycling classes. It feels closer to a real bike ride, and I 
can listen to my own playlists instead of enduring whatever torturous tracks Peloton has licensed. The feeling of approaching an 
incline and having the SmartSpin2k automatically increase the resistance is very cool, and tricks my brain just enough to make me feel like 
I'm actually biking up a hill. It's great motivation to bike a little harder during a workout. &lt;/p&gt;
&lt;h2&gt;Miscellaneous irritations&lt;/h2&gt;
&lt;p&gt;While setting this up I suffered several indiginites and annoyances. I should stress that none of these were related to 
OpenPelo or the SmartSpin2k. Instead, these were issues unique to my home setup.  &lt;/p&gt;
&lt;p&gt;Getting Zwift to connect to the SmartSpin2k required some finesse. A simple Bluetooth connection from the SmartSpin2K to my Desktop PC 
was not working for me. The connection was too sketchy, and the weak little USB Bluetooth adapter I have is simply not up 
for the task of connecting to a device 10 ft away.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bluetooth Adapater" src="/images/zwift-with-peloton/bluetooth_adapter.JPEG" title="An inadequate Bluetooth adapter"&gt;&lt;/p&gt;
&lt;p&gt;Instead, I ended up connecting the SmartSpin2K to my iPhone via Bluetooth. Turns out there is a &lt;a href="https://apps.apple.com/us/app/zwift-companion/id934083691"&gt;mobile companion app&lt;/a&gt; 
for Zwift (aptly named &lt;code&gt;Companion&lt;/code&gt;) which is able to act as the intermediary between your sensors and Zwift. 
However, this app is only able to connect to Zwift 
&lt;strong&gt;if the 2 applications are on the same WiFi network&lt;/strong&gt;. This took me some time to realize, and I struggled to get the 
companion app to connect to Zwift initially. &lt;/p&gt;
&lt;p&gt;For reasons I will detail in a later blog, my desktop PC is on a separate subnet and is connected to the Internet via 
an ethernet cable running to a switch. Thankfully I have a WiFi adapter set up on my PC, so I turned that 
network adapter on and voilÃ , Zwift and the Companion app could connect.&lt;/p&gt;
&lt;p&gt;&lt;img alt="WiFi Adapater" src="/images/zwift-with-peloton/wifi_adapter.JPEG" title="The WiFi adapter that saved the day"&gt;&lt;/p&gt;
&lt;p&gt;However, the connection still intermittently drops out during rides. I'm not sure what's causing this instability. 
The interuptions last 1-2 seconds and aren't a dealbreaker, but they are a distraction during a ride.&lt;/p&gt;</content><category term="General"></category><category term="zwift"></category><category term="peloton"></category><category term="smartspin2k"></category><category term="android"></category></entry><entry><title>First Post</title><link href="https://forestdussault.com/first-post.html" rel="alternate"></link><published>2025-03-14T10:00:00-04:00</published><updated>2025-03-14T10:00:00-04:00</updated><author><name>Forest Dussault</name></author><id>tag:forestdussault.com,2025-03-14:/first-post.html</id><summary type="html">&lt;p&gt;Testing my first blog post with Pelican&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Hello, world&lt;/h1&gt;
&lt;p&gt;I've decided to use &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; + GitHub pages to build out this blog. It's a fairly straightforward and almost entirely free way of 
hosting a blog (thanks GitHub). Even the image hosting is free! My only expense here is the domain name through Namecheap.&lt;/p&gt;
&lt;p&gt;The posts are written as Markdown files, which is comfy for me. I have a &lt;code&gt;Justfile&lt;/code&gt; set up so I can type &lt;code&gt;just github&lt;/code&gt; and the blog gets deployed.&lt;/p&gt;
&lt;p&gt;I'm using the &lt;a href="https://github.com/hdra/Pelican-Cid"&gt;cid theme&lt;/a&gt; as a base, it's clean enough and customizing it to my liking has been simple. &lt;/p&gt;
&lt;p&gt;Image embeds w/custom styling:
&lt;img alt="GitHub Fish" src="/images/github-fish.png" title="GitHub Fish"&gt;&lt;/p&gt;
&lt;p&gt;The blog itself is entirely contained in &lt;a href="https://github.com/forest-d/blog"&gt;this repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's to many more blog posts.&lt;/p&gt;</content><category term="General"></category><category term="first"></category><category term="pelican"></category><category term="python"></category><category term="blogging"></category></entry></feed>